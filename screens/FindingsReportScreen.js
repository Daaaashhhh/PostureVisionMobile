import React from 'react';
import {
  View,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  Share,
  Platform,
  Alert,
} from 'react-native';
import Icon from 'react-native-vector-icons/Ionicons';
import {BlurView} from '@react-native-community/blur';
import LinearGradient from 'react-native-linear-gradient';
import CustomText from '../CustomText';

const FindingsReportScreen = ({navigation}) => {
  // Placeholder data for the report
  const reportData = {
    sessionId: 'SESS_12345XYZ',
    sessionDate: new Date().toLocaleDateString(),
    userName: 'Alex Ray (Placeholder)',
    duration: '45 minutes',
    keyFindings: [
      'Significant improvement in cervical spine alignment.',
      'Slight forward head posture still observed during prolonged sitting.',
      'Lumbar curvature within normal limits.',
    ],
    averagePostureScore: '85/100',
    areasForImprovement: [
      'Continue exercises focusing on neck retraction.',
      'Take regular breaks to readjust posture when working at a desk.',
    ],
  };

  const handleShareReport = async () => {
    try {
      const reportContent = `
PostureVision® Report
Session ID: ${reportData.sessionId}
Date: ${reportData.sessionDate}
User: ${reportData.userName}
Duration: ${reportData.duration}

Key Findings:
${reportData.keyFindings.map(finding => `• ${finding}`).join('\n')}

Overall Posture Score: ${reportData.averagePostureScore}

Areas for Improvement:
${reportData.areasForImprovement.map(area => `• ${area}`).join('\n')}

This report was generated by PostureVision®.
      `;

      await Share.share({
        message: reportContent,
        title: `PostureVision Report - ${reportData.sessionId}`,
      });
    } catch (error) {
      Alert.alert('Error', 'Failed to share report');
    }
  };

  const handleDownloadPDF = () => {
    Alert.alert(
      'Coming Soon',
      'PDF download functionality will be available in a future update.',
    );
  };

  const MetricGroup = ({title, children}) => (
    <View style={styles.metricGroup}>
      <CustomText style={styles.metricGroupTitle}>{title}</CustomText>
      <View style={styles.metricGroupContent}>{children}</View>
    </View>
  );

  const MetricItem = ({label, value}) => (
    <View style={styles.metricItem}>
      <CustomText style={styles.metricLabel}>{label}</CustomText>
      <CustomText style={styles.metricValue}>{value}</CustomText>
    </View>
  );

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.goBack()}>
          <Icon name="arrow-back" size={24} color="#fff" />
        </TouchableOpacity>
        <CustomText style={styles.headerTitle}>Findings Report</CustomText>
        <View style={styles.headerRight} />
      </View>

      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        <View style={styles.reportContainer}>
          <View style={styles.reportHeader}>
            <CustomText style={styles.reportTitle}>User Findings Report</CustomText>
            <View style={styles.reportActions}>
              <TouchableOpacity
                style={[styles.actionButton, styles.shareButton]}
                onPress={handleShareReport}>
                <Icon name="share-outline" size={20} color="#fff" />
                <CustomText style={styles.actionButtonText}>Share</CustomText>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.actionButton, styles.downloadButton]}
                onPress={handleDownloadPDF}>
                <Icon name="download-outline" size={20} color="#fff" />
                <CustomText style={styles.actionButtonText}>Download PDF</CustomText>
              </TouchableOpacity>
            </View>
          </View>

          <MetricGroup title="Report Details">
            <MetricItem label="Session ID" value={reportData.sessionId} />
            <MetricItem label="Date" value={reportData.sessionDate} />
            <MetricItem label="User" value={reportData.userName} />
            <MetricItem label="Session Duration" value={reportData.duration} />
          </MetricGroup>

          <MetricGroup title="Key Findings">
            {reportData.keyFindings.map((finding, index) => (
              <View key={index} style={styles.findingItem}>
                <Icon name="checkmark-circle" size={20} color="#4CAF50" />
                <CustomText style={styles.findingText}>{finding}</CustomText>
              </View>
            ))}
          </MetricGroup>

          <MetricGroup title="Overall Posture Score">
            <View style={styles.scoreContainer}>
              <CustomText style={styles.scoreValue}>
                {reportData.averagePostureScore}
              </CustomText>
              <View style={styles.scoreBar}>
                <View
                  style={[
                    styles.scoreFill,
                    {width: `${parseInt(reportData.averagePostureScore)}%`},
                  ]}
                />
              </View>
            </View>
          </MetricGroup>

          <MetricGroup title="Areas for Improvement">
            {reportData.areasForImprovement.map((area, index) => (
              <View key={index} style={styles.improvementItem}>
                <Icon name="alert-circle" size={20} color="#FFA726" />
                <CustomText style={styles.improvementText}>{area}</CustomText>
              </View>
            ))}
          </MetricGroup>

          <View style={styles.footer}>
            <CustomText style={styles.footerText}>
              This report is based on data collected during your PostureVision®
              session. For a detailed analysis, please consult with a healthcare
              professional if needed.
            </CustomText>
          </View>
        </View>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingTop: 60,
    paddingBottom: 20,
  },
  backButton: {
    width: 44,
    height: 44,
    backgroundColor: 'rgba(255, 255, 255, 0.15)',
    borderRadius: 15,
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 34,
    fontWeight: '800',
    color: '#FFFFFF',
  },
  headerRight: {
    width: 44,
  },
  scrollView: {
    flex: 1,
  },
  reportContainer: {
    padding: 20,
  },
  reportHeader: {
    marginBottom: 24,
  },
  reportTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 16,
  },
  reportActions: {
    flexDirection: 'row',
    gap: 12,
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
    gap: 8,
  },
  shareButton: {
    backgroundColor: '#2196F3',
  },
  downloadButton: {
    backgroundColor: '#4CAF50',
  },
  actionButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  metricGroup: {
    marginBottom: 24,
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    borderRadius: 12,
    padding: 16,
  },
  metricGroupTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 16,
  },
  metricGroupContent: {
    gap: 12,
  },
  metricItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  metricLabel: {
    fontSize: 16,
    color: 'rgba(255, 255, 255, 0.7)',
  },
  metricValue: {
    fontSize: 16,
    color: '#FFFFFF',
    fontWeight: '600',
  },
  findingItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  findingText: {
    flex: 1,
    fontSize: 16,
    color: '#FFFFFF',
  },
  scoreContainer: {
    alignItems: 'center',
  },
  scoreValue: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#4CAF50',
    marginBottom: 12,
  },
  scoreBar: {
    width: '100%',
    height: 8,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 4,
    overflow: 'hidden',
  },
  scoreFill: {
    height: '100%',
    backgroundColor: '#4CAF50',
    borderRadius: 4,
  },
  improvementItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  improvementText: {
    flex: 1,
    fontSize: 16,
    color: '#FFFFFF',
  },
  footer: {
    marginTop: 32,
    padding: 16,
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    borderRadius: 12,
  },
  footerText: {
    fontSize: 14,
    color: 'rgba(255, 255, 255, 0.7)',
    textAlign: 'center',
    lineHeight: 20,
  },
});

export default FindingsReportScreen; 